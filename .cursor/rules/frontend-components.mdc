---
description: R√®gles de d√©veloppement frontend pour Cloaky.me : conventions sur les composants React/Next.js, usage de shadcn/ui, Tailwind CSS, navigation, Server Actions, accessibilit√©, internationalisation (next-intl), typage strict et SEO.
globs: [
  "src/app/**/*.{tsx,ts}", 
  "src/components/**/*.{tsx,ts}", 
  "src/lib/actions/**/*.{ts,tsx}", 
  "src/messages/**/*.{ts,json}"
]
alwaysApply: true
---
# üé® R√®gles Frontend et Composants

## Architecture des composants

1. **Structure des dossiers** :
    - Utiliser les composants shadcn/ui par d√©faut donc les installer si pas encore fait
    - D√©composer les pages en composants r√©utilisables
    - Cr√©er un dossier `components` local dans le r√©pertoire de la page si les composants sont sp√©cifiques
    - Pour les composants globaux, demander confirmation avant de les placer dans `src/components/ui`
   

2. **Composants** :
   - **Privil√©gier les Client Components** sauf si Server Component n√©cessaire
   - Toujours utiliser shadcn/ui sauf mention contraire
   - Composants responsives pour ordinateur / mobile / tablette
   - Typage TypeScript strict

3. **Navigation** :
   - **Utiliser useRouter** pour la navigation
   - √âviter les balises `<a>` pour la navigation interne
   - Utiliser `router.push()` et `router.replace()` selon le contexte

4. **Gestion d'√©tat** :
   - **Minimiser l'utilisation de useState** - privil√©gier les props et Server Actions
   - **√âviter useEffect** quand possible - utiliser les Server Actions pour les effets de bord
   - Pr√©f√©rer les formulaires contr√¥l√©s par Server Actions plut√¥t que l'√©tat local

5. **Acc√®s aux donn√©es** :
   - **Aucun appel √† la base de donn√©es c√¥t√© client**
   - Toutes les requ√™tes DB doivent passer par les Server Actions Update / Create / Delete

6. **Pages** :
   - SEO basique obligatoire (title, meta description, og:image)
   - Gestion d'erreurs avec try/catch ou error boundary
   - Logs explicites pour auth, paiement, upload
   - Compatibilit√© Next.js v14 App Router

7. **Type** :
   - Tu tuilisera toujours les type prisma natif et les surchargera si besoin

## Performance et SEO

1. **Optimisations** :
   - Images optimis√©es (WebP, lazy loading)
   - Code splitting
   - CSS optimis√©
   - JavaScript minifi√©

2. **SEO** :
   - M√©tadonn√©es compl√®tes
   - Sitemap.xml dynamique
   - Robots.txt configur√©
   - Donn√©es structur√©es Schema.org

## Internationalisation

- Support FR/EN avec next-intl
- Messages dans `src/messages/`
- Routing localis√© avec `[locale]`
- **TOUS les textes doivent √™tre traduits** via `useTranslations()`
- **Aucun texte en dur** dans les composants

### R√®gles de traduction obligatoires

1. **Tous les textes visibles** doivent utiliser `useTranslations()`
2. **Aucun texte en dur** dans les composants (pas de "Mon texte", "Submit", etc.)
3. **Organisation des cl√©s** : `Page.section.element` (ex: `Deposit.form.title`)
4. **Fallback** : Toujours pr√©voir une valeur par d√©faut

```tsx
import { useTranslations } from "next-intl";

export function LocalizedComponent() {
  const t = useTranslations("Component.namespace");
  
  return (
    <div>
      <h1>{t("title")}</h1>
      <p>{t("description")}</p>
      <button>{t("submit")}</button>
    </div>
  );
}
```

### Exemple d'organisation des cl√©s

```json
{
  "Deposit": {
    "form": {
      "title": "D√©poser du contenu",
      "description": "Partagez vos cr√©ations",
      "submit": "Publier"
    },
    "validation": {
      "required": "Ce champ est requis",
      "invalid": "Format invalide"
    }
  }
}
```
