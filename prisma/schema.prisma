// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== NEXT AUTH MODELS =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // Informations de base (pas de GPS)
  country    String? // Pays basé sur IP (ex: "FR", "US")
  deviceType String? // "desktop", "tablet", "mobile"
  osName     String? // "Windows", "macOS", "iOS", "Android"

  // Métadonnées
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  firstName     String    @default("")
  lastName      String    @default("")
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Pour l'authentification email/mot de passe
  role          UserRole  @default(USER)
  bio           String    @default("")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations NextAuth
  accounts Account[]
  sessions Session[]

  // Relations notifications
  notifications        Notification[]
  notificationEarnings NotificationEarning[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===== NOTIFICATIONS MODELS =====

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json? // Données supplémentaires (flexible)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relation avec NotificationEarning (optionnelle)
  notificationEarningId String?              @unique
  notificationEarning   NotificationEarning? @relation(fields: [notificationEarningId], references: [id])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationEarning {
  id        String        @id @default(cuid())
  userId    String
  amount    Decimal       @db.Decimal(10, 2)
  currency  String        @default("EUR")
  source    String // Source du gain (vente, parrainage, etc.)
  status    EarningStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relation avec Notification (une NotificationEarning peut avoir une Notification)
  notification Notification?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_earnings")
}

// ===== ENUMS =====

enum UserRole {
  USER
  ADMIN
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  EARNING
  SALE
  SYSTEM
}

enum EarningStatus {
  PENDING
  PROCESSED
  FAILED
}
